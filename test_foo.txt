#!/usr/bin/perl

use Getopt::Long;

&Getopt::Long::Configure('pass_through', 'no_autoabbrev');
&Getopt::Long::GetOptions('help|h' => \$help,
			  'input|i=s' => \$fileName,
			  'verbose|v' => \$verbose,
			  'score|s:f' => \$scoreCut,
			  'ddg|d:f' => \$ddgCut,
			  'rmsd|r:f' => \$rmsdCut,
			  'sasa:f' => \$sasaCut,
			  'unsat|u:f' => \$unsatCut,
			  'ddgSasa:f' => \$ddgSasaCut,
			  'sasaUnsat:f' => \$sasaUnsatCut,
			  'hbondE|b:f' => \$hbondECut,
			  'packstat|p:f' => \$packstatCut,
			  'scvalue:f'=> \$scValCut,
			 );

if($help == 1){
	print "retrieve score file entries on any of the following metrics (assuming they exist in your score file): score file name (REQUIRED)
  -i
  --input

  -v
  --verbose

  score cutoff
  -s
  --score
  
  ddg cutoff
  -d
  --ddg
  
  RMSD cutoff sasa
  -r
  --rmsd

  SASA cutoff
  --sasa

  unsatisfied hydrogen bonds cutoff
  -u
  --unsat

  packstat cutoff
  -p
  --packstat

  DDG/Sasa cutoff
  --ddgSasa

 ShapeComp cutoff
  --scvalue

  hbond energy ratio cutoff
  --hbondE
  
  SASA/# Unsat cutoff
  --sasaUnsat\n";
	exit(0);
}

if(! $fileName){
	print "Error: must provide score file name using -i or --input\n";
	exit(1);
}

chomp $fileName; ## Chomp the last parameter because it has the newline character

open(my $inputFile, "$fileName") || die("Can't open $fileName:!\n");

my @colNames;
my $count = 0;
if(! $verbose){
	print "desc\tenergy\trmsd\tddg\tsasa\tunsats\thbondE\tpackstat\tsc_value\t(dg/sasa)\t(sasa/unsat)\n";
}
while($line=<$inputFile>){
  chomp($line);
  #print "$line";
  if($line=~/^SCORE/){
    if($count==0){
      @colNames = split(/\s+/,$line);
    }
    print "$line";
    else{
      @vals = split(/\s+/,$line);
      for($i=0; $i<=$#colNames; $i++){
				if($colNames[$i] eq "total_score"){
					$energy = $vals[$i];	
				}
				if($colNames[$i] eq "packstat"){
					$packstat = $vals[$i];	
				}
				if($colNames[$i] eq "dG_separated"){
					$ddg = $vals[$i];
				}
				if($colNames[$i] eq "rms"){
					$rmsd = $vals[$i];
				}
				if($colNames[$i] eq "dSASA_int"){
					$sasa = $vals[$i];
				}
				if($colNames[$i] eq "delta_unsatHbonds"){
					$unsats = $vals[$i];
				}
				if($colNames[$i] eq "description"){
					$desc = $vals[$i];
				}
				if($colNames[$i] eq "hbond_E_fraction"){
					$hbondEnergy = $vals[$i];
				}
				if($colNames[$i] eq "sc_value"){
					$sc = $vals[$i];
				}
				if($sasa != 0){
					$ddgSasa = ($ddg/$sasa);
				}
				if($unsats != 0){
					$sasaUnsat = ($sasa/$unsats);
				}
				else{
					$sasaUnsat = "N/A";
				}
				print "Found ME!";

				if( (!$scoreCut or $energy < $scoreCut) and 
						(!$ddgCut or $ddg <= $ddgCut) and 
						(!$rmsdCut or $rmsd<=$rmsdCut) and 
						(!$unsatCut or $unsats<=$unsatCut) and 
						(!$sasaCut or $sasa>=$sasaCut) and 
						(!$packstatCut or $packstat>=$packstatCut) and 
						(!$hbondECut or $hbondEnergy>=$hbondECut) and 
						(!$ddgSasaCut or $ddgSasa <= $ddgSasaCut) and 
						(!$scValCut or $sc <= $scValCut) and
						(!$sasaUnsatCut or $sasaUnsat eq "N/A" or $sasaUnsat >= $sasaUnsatCut) )
				{
					if($verbose){
						print $desc . ":\n\tenergy:" . $energy .
							"\n\trmsd:" . $rmsd . 
							"\n\tddg:" . $ddg . 
							"\n\tsasa:" . sprintf("%.0f", $sasa) . 
							"\n\tburied unsatisfied:" . $unsats . 
							"\n\tpackstat:" . $packstat . 
							"\n\tsc_value:". $sc .
							"\n\thbond energy ratio:" . $hbondEnergy . 
							"\n\t(dg/sasa):" . sprintf("%.4f", $ddgSasa) . 
																 "\n\t(sasa/unsat):" . sprintf("%.0f", $sasaUnsat) . "\n";
					}
					else{
#$desc =~ s/.*_//g;
						print "$desc\t$energy\t$rmsd\t".sprintf("%.1f",$ddg)."\t" . sprintf("%.0f", $sasa) . "\t".sprintf("%.0f",$unsats)."\t$hbondEnergy\t$packstat\t$sc_value\t" 
							. sprintf("%.4f", $ddgSasa) . "\t" . sprintf("%.0f", $sasaUnsat) . "\n";
					}
				}
			}
			$count++;
		}
	}
}
